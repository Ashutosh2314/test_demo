# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gBdoK7YffFSXF5avrSPrXRFBLkLo40XT

# Title of Project

# Objective
to anaylsis the given data set perfectly

# Import Library
"""

import pandas as pd

import numpy as np

import matplotlib.pyplot as plt

import seaborn as sns

"""# import data"""

df=pd.read_csv('https://github.com/YBIFoundation/Dataset/raw/main/Bank%20Churn%20Modelling.csv')

"""Analyse of data"""

df.head()

df.info()

df.describe()

"""checking duplicate"""

df.duplicated('CustomerId').sum()

"""set index"""

df=df.set_index('CustomerId')

df.info()

"""Encoding"""

df['Geography'].value_counts()

df.replace({'Geography':{'France':2,'Germany':1,'Spain':0}},inplace=True)

df['Gender'].value_counts()

df.replace({'Gender':{'Male':0,'Female':1}},inplace=True)

df['Num Of Products'].value_counts()

df.replace({'Num Of Products':{'1':0,'2':1,'3':1,'4':1}},inplace=True)

df['Has Credit Card'].value_counts()

df['Is Active Member'].value_counts()

"""checking zero bank balance"""

df.loc[(df['Balance']==0),'Churn'].value_counts()

df['Zero Balance']=np.where(df['Balance']>0,1,0)

df['Zero Balance'].hist()

df.groupby(['Churn','Geography']).count()

"""# Define label and Features"""

df.columns

x=df.drop(['Surname','Churn'],axis=1)

y=df['Churn']

x.shape,y.shape

"""# Undersampling,oversampling"""

df['Churn'].value_counts()

sns.countplot(x='Churn',data=df)

x.shape,y.shape

"""# Random UnderSmapling"""

from imblearn.under_sampling import RandomUnderSampler

rus=RandomUnderSampler(random_state=2529)

X_rus,y_rus=rus.fit_resample(x,y)

X_rus.shape,y_rus.shape,x.shape,y.shape

y.value_counts()

y_rus.value_counts()

y_rus.plot(kind='hist')

"""Random over Sampling"""

from imblearn.over_sampling import RandomOverSampler

ros=RandomOverSampler(random_state=2529)

X_ros,y_ros=ros.fit_resample(x,y)

X_ros.shape,y_ros.shape,x.shape,y.shape

y.value_counts()

y_ros.value_counts()

y_ros.plot(kind='hist')

"""# TRAIN TEST SPLIT"""

from sklearn.model_selection import train_test_split

"""Split Original data"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=2526)

"""# split of randomunder sample"""

X_train_rus,X_test_rus,y_train_rus,y_train_rus=train_test_split(X_rus,y_rus,test_size=0.3,random_state=2526)

"""# Split of randomoverflow"""

X_train_ros,X_test_ros,y_train_ros,y_train_ros=train_test_split(X_ros,y_ros,test_size=0.3,random_state=2526)

"""# Standardize features"""

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()

"""# Standardize Original data"""

x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_train[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(x_test[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

"""# Standardize randomoverflow data"""

X_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(X_train_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

X_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(X_test_rus[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

"""# Standardize under sample data"""

X_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(X_train_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

X_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']]=sc.fit_transform(X_test_ros[['CreditScore','Age','Tenure','Balance','Estimated Salary']])

"""Support vector machine"""

from sklearn.svm import SVC

svc= SVC()

y_pred=

"""# MODEL ACCURACY"""

from sklearn.metrics import confusion_matrix,classification_report

confusion_matrix(y_test,y_pred)

print(classification_report(y_test,y_pred))

"""# HYPERPARAMETER TUNNING"""

from sklearn.model_selection import GridSearchCV

param_grid={'C':[0.1,1,10],
            'gamma':[1,0.1,0.01],
            'kernel':['rbf'],
            'class_weight':['balanced']}

grid=GridSearchCV(SVC(),param_grid,refit=True,verbose=2,cv=2)

